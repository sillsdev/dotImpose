name: Build and Test

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  workflow_call:
    inputs:
      artifact-name-suffix:
        description: "Suffix for artifact names"
        required: false
        default: ""
        type: string
    outputs:
      version:
        description: "The full version string generated"
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.full_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Determine version with run ID
        id: version
        shell: bash
        run: |
          # Extract version from Directory.Build.props
          BASE_VERSION=$(grep -E '<Version>.*</Version>' Directory.Build.props | sed -E 's|.*<Version>(.*)</Version>.*|\1|' | tr -d '[:space:]')

          # Validate version was extracted
          if [ -z "$BASE_VERSION" ]; then
            echo "Error: Could not extract version from Directory.Build.props"
            exit 1
          fi

          # Create version with run number (not run_id which is too large)
          # Use run_number which is smaller and fits in NuGet version constraints
          FULL_VERSION="${BASE_VERSION}.${{ github.run_number }}"
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "Base version: $BASE_VERSION"
          echo "Full version: $FULL_VERSION"

      - name: Restore dependencies
        run: dotnet restore src/DotImpose.csproj

      - name: Build
        run: dotnet build src/DotImpose.csproj --no-restore --configuration Release -p:Version=${{ steps.version.outputs.full_version }}

      - name: Test
        run: dotnet test tests/sillsdev.dotImpose.csproj --no-build --configuration Release --verbosity normal

      - name: Pack
        run: dotnet pack src/DotImpose.csproj --no-build --configuration Release --output nupkg/ -p:Version=${{ steps.version.outputs.full_version }}

      - name: List generated packages
        run: ls -la nupkg/

      - name: List compiled output
        run: ls -la output/Release/

      - name: Upload package artifacts to GitHub (Draft)
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ steps.version.outputs.full_version }}${{ inputs.artifact-name-suffix }}
          path: nupkg/*.nupkg

      - name: Upload compiled binaries to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.version.outputs.full_version }}${{ inputs.artifact-name-suffix }}
          path: |
            output/Release/*.dll
            output/Release/*.pdb
            output/Release/*.deps.json
